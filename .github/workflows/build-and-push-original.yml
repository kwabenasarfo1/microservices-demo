name: Build, Push Docker Images and Update YAML

on: 
  push:
    branches:
      - dev-new
  workflow_dispatch:
  
permissions:
  id-token: write
  contents: write

env:
  AZURE_REGION: 'uksouth'
  ACR_NAME: 'aksretailacr'
  RESOURCE_GROUP_NAME: 'microservices-demo-rg'

jobs:
  build-push-update-yaml:
    runs-on: ubuntu-latest
    timeout-minutes: 60  
    strategy:
      matrix:
        service:
          - src/adservice
          - src/cartservice/src 
          - src/checkoutservice
          - src/currencyservice
          - src/emailservice
          - src/frontend
          - src/loadgenerator
          - src/paymentservice
          - src/productcatalogservice
          - src/recommendationservice
          - src/shippingservice
          - src/shoppingassistantservice
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Log in to Azure
        uses: azure/login@v1.4.7
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Generate Image Version Tag
        id: version-tag
        run: |
          # Using commit short hash as version, or you could use a timestamp
          VERSION_TAG=$(git rev-parse --short HEAD)
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          DOCKERFILE_PATH=${{ matrix.service }} 
          if [ ! -f "$DOCKERFILE_PATH/Dockerfile" ]; then
            DOCKERFILE_PATH=${{ matrix.service }}/src
          fi

          if [ ! -f "$DOCKERFILE_PATH/Dockerfile" ]; then
            echo "Error: Dockerfile not found in $DOCKERFILE_PATH"
            exit 1
          fi

          cd $DOCKERFILE_PATH

          if [ "${{ matrix.service }}" == "src/cartservice/src" ]; then
            IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/cartservice
          else
            IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/$(basename ${{ matrix.service }})
          fi

          docker build -t $IMAGE_NAME:${{ env.VERSION_TAG }} .
          docker push $IMAGE_NAME:${{ env.VERSION_TAG }}

      - name: Update YAML files with new image tags
        run: |
          # Assuming your Kubernetes YAML files are in a "k8s" directory
          find release -type f -name '*.yaml' -exec sed -i "s#${{ env.ACR_NAME }}.azurecr.io/$(basename ${{ matrix.service }}):.*#${{ env.ACR_NAME }}.azurecr.io/$(basename ${{ matrix.service }}):${{ env.VERSION_TAG }}#g" {} +

      - name: Commit and push updated YAML files
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
          # Stage and commit changes first
          git add release/*.yaml
          git commit -m "Updated image tags for $(basename ${{ matrix.service }}) to ${{ env.VERSION_TAG }}"
          
          # Pull the latest changes from the remote branch with rebase
          git pull --rebase https://x-access-token:${{ secrets.GH_PAT }}@github.com/kwabenasarfo1/microservices-demo.git dev-new
          
          # Push the changes to the remote branch
          git push --force https://x-access-token:${{ secrets.GH_PAT }}@github.com/kwabenasarfo1/microservices-demo.git HEAD:dev-new
      
      - name: Azure CLI logout
        run: |
          az logout



# permissions:
#   id-token: write
#   contents: read

# env:
#   AZURE_REGION: 'uksouth'
#   ACR_NAME: 'aksretailacr'
#   RESOURCE_GROUP_NAME: 'microservices-demo-rg'

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     timeout-minutes: 60  
#     strategy:
#       matrix:
#         service:
#           - src/adservice
#           - src/cartservice/src 
#           - src/checkoutservice
#           - src/currencyservice
#           - src/emailservice
#           - src/frontend
#           - src/loadgenerator
#           - src/paymentservice
#           - src/productcatalogservice
#           - src/recommendationservice
#           - src/shippingservice
#           - src/shoppingassistantservice
#     outputs:
#       images: ${{ steps.set-images-output.outputs.images }} 
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Install Azure CLI
#         run: |
#           curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

#       - name: Verify Azure CLI installation
#         run: |
#           az --version

#       - name: Log in to Azure
#         uses: azure/login@v1.4.7
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#       - name: Log in to Azure Container Registry
#         run: |
#           az acr login --name ${{ env.ACR_NAME }}

#       - name: Build and push Docker image
#         run: |
#           # Adjust the path if your Dockerfile is in a different location
#           DOCKERFILE_PATH=${{ matrix.service }} 
#           if [ ! -f "$DOCKERFILE_PATH/Dockerfile" ]; then
#             DOCKERFILE_PATH=${{ matrix.service }}/src # Check in the 'src' subdirectory
#           fi

#           if [ ! -f "$DOCKERFILE_PATH/Dockerfile" ]; then
#             echo "Error: Dockerfile not found in $DOCKERFILE_PATH"
#             exit 1
#           fi

#           cd $DOCKERFILE_PATH  # Change to the directory containing the Dockerfile

#           # Special handling for cartservice image name
#           if [ "${{ matrix.service }}" == "src/cartservice/src" ]; then
#             IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/cartservice
#           else
#             IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/$(basename ${{ matrix.service }})
#           fi

#           # Check for requirements.txt (Python) or go.mod and go.sum (Go)
#           if [ -f "requirements.txt" ]; then
#             pip install --upgrade pip
#             pip install -r requirements.txt
#           elif [ -f "go.mod" ] && [ -f "go.sum" ]; then
#             go mod download 
#           fi

#           docker build -t $IMAGE_NAME:latest .
#           docker push $IMAGE_NAME:latest

#       - id: set-images-output 
#         run: echo "images=$(echo ${{ matrix.service }} | sed 's/src\///g' | sed 's/\/src//g')" >> $GITHUB_OUTPUT

#       - name: Azure CLI logout
#         run: |
#           az logout
