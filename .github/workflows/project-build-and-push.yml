# name: Project Build and Push Docker Images

# on: 
#   push:
#     branches:
#       - dev-new
#     inputs:
#       image_tag:
#         description: 'Tag of the Docker image to deploy'
#         required: true
#         default: 'latest'

# permissions:
#   id-token: write
#   contents: read

# env:
#   AZURE_REGION: 'uksouth'
#   ACR_NAME: 'aksretailacr'
#   AKS_NAMESPACE: 'default'
#   RESOURCE_GROUP_NAME: 'microservices-demo-rg'

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     timeout-minutes: 60  
#     strategy:
#       matrix:
#         service:
#           - src/adservice
#           - src/cartservice/src 
#           - src/checkoutservice
#           - src/currencyservice
#           - src/emailservice
#           - src/frontend
#           - src/loadgenerator
#           - src/paymentservice
#           - src/productcatalogservice
#           - src/recommendationservice
#           - src/shippingservice
#           - src/shoppingassistantservice
#     outputs:
#       images: ${{ steps.set-images-output.outputs.images }} 
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Install Azure CLI
#         run: |
#           curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

#       - name: Verify Azure CLI installation
#         run: |
#           az --version

#       - name: Log in to Azure
#         uses: azure/login@v1.4.7
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#       - name: Log in to Azure Container Registry
#         run: |
#           az acr login --name ${{ env.ACR_NAME }}

#       - name: Build and push Docker image
#         run: |
#           # Adjust the path if your Dockerfile is in a different location
#           DOCKERFILE_PATH=${{ matrix.service }} 
#           if [ ! -f "$DOCKERFILE_PATH/Dockerfile" ]; then
#             DOCKERFILE_PATH=${{ matrix.service }}/src # Check in the 'src' subdirectory
#           fi

#           if [ ! -f "$DOCKERFILE_PATH/Dockerfile" ]; then
#             echo "Error: Dockerfile not found in $DOCKERFILE_PATH"
#             exit 1
#           fi

#           cd $DOCKERFILE_PATH  # Change to the directory containing the Dockerfile

#           # Special handling for cartservice image name
#           if [ "${{ matrix.service }}" == "src/cartservice/src" ]; then
#             IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/cartservice
#           else
#             IMAGE_NAME=${{ env.ACR_NAME }}.azurecr.io/$(basename ${{ matrix.service }})
#           fi

#           # Check for requirements.txt (Python) or go.mod and go.sum (Go)
#           if [ -f "requirements.txt" ]; then
#             pip install --upgrade pip
#             pip install -r requirements.txt
#           elif [ -f "go.mod" ] && [ -f "go.sum" ]; then
#             go mod download 
#           fi

#           docker build -t $IMAGE_NAME:latest .
#           docker push $IMAGE_NAME:latest

#       - id: set-images-output 
#         run: echo "images=$(echo ${{ matrix.service }} | sed 's/src\///g' | sed 's/\/src//g')" >> $GITHUB_OUTPUT

#       - name: Azure CLI logout
#         run: |
#           az logout


name: Build and Push

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to build and push'
        required: true
        default: 'latest'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker images
      id: build-and-push
      run: |
        echo "Building and pushing Docker images"
        services=(
          "currencyservice"
          "adservice"
          "cartservice"
          "checkoutservice"
          "emailservice"
          "frontend"
          "loadgenerator"
          "paymentservice"
          "productcatalogservice"
          "recommendationservice"
          "shippingservice"
          "shoppingassistantservice"
        )
        images=""
        for service in "${services[@]}"; do
          image=${{ secrets.ACR_LOGIN_SERVER }}/$service:${{ github.event.inputs.image_tag }}
          docker build -t $image .
          docker push $image
          images="$images $image"
        done
        echo "::set-output name=images::$images"
        echo $images > images.txt

    - name: Upload images artifact
      uses: actions/upload-artifact@v2
      with:
        name: images
        path: images.txt

    - name: Azure CLI logout
      run: |
        az logout